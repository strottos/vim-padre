" vim: et ts=2 sts=2 sw=2

Execute (Check we can connect to a socket to send and receive data and close the socket):
  python3 << EOF
  import socket
  sock = socket.socket()
  sock.bind(('', 0))
  port = sock.getsockname()[1]
  sock.close()
  vim.command("let t:port = {}".format(port))
  EOF

  let job = job_start('test/pythonx/echo_server.py --port=' . t:port)

  call padre#socket#Connect('localhost', t:port)

  sleep 2

  let t:CallbackCalled = 0

  function! g:EchoServerCallbackTest(channel, msg)
    AssertEqual a:msg, 'test echo server'
    let t:CallbackCalled = 1
  endfunction

  call padre#socket#Send('test echo server', function('g:EchoServerCallbackTest'))
  sleep 100ms

After:
  AssertEqual 1, t:CallbackCalled

  call padre#socket#Send('quit')

  call padre#socket#Close()

  sleep 100ms

  AssertEqual 'closed', padre#socket#Status()
  call job_stop(job)

Execute (Check we can connect to a socket that opens after a short sleep):
  python3 << EOF
  import socket
  sock = socket.socket()
  sock.bind(('', 0))
  port = sock.getsockname()[1]
  sock.close()
  vim.command("let t:port = {}".format(port))
  EOF

  let job = job_start('test/pythonx/echo_server.py --init_sleep 1 --port=' . t:port)

  let t:CallbackCalled = 0

  function! g:EchoServerCallbackTest(channel, msg)
    AssertEqual a:msg, 'test echo server'
    let t:CallbackCalled = 1
  endfunction

  call padre#socket#Connect('localhost', t:port)

  sleep 3

  call padre#socket#Send('test echo server', function('g:EchoServerCallbackTest'))
  sleep 100ms

After:
  AssertEqual 1, t:CallbackCalled

  call padre#socket#Send('quit')

  call padre#socket#Close()

  call job_stop(job)
