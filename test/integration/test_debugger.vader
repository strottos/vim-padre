" vim: et ts=2 sts=2 sw=2

Before:
  call padre#Enable()

  function! g:CheckRegexInLogLines(re, line_from, line_to)
    let l:original_winnr = winnr()
    wincmd l
    let t:i = a:line_from
    let t:has_matched = 0
    while 1
      if !empty(matchstr(getline(t:i), a:re))
        let t:has_matched = 1
        break
      endif

      let t:i += 1

      if (a:line_to == '$' && t:i > line('$')) || (a:line_to =~# '^\d\+$' && t:i > a:line_to)
        break
      endif
    endwhile
    execute l:original_winnr . ' wincmd w'
    AssertEqual 1, t:has_matched
  endfunction

  function! g:GetLastLogLineNumber()
    wincmd l
    let l:lastLogLine = line('$')
    wincmd h

    return l:lastLogLine
  endfunction

  function! g:CheckCurrentCodePointerLine()
    redir => l:signs
      silent exec 'sign place'
    redir end

    for l:line in split(l:signs, '\n')
      let l:match = matchlist(l:line, 'Signs for \(.*\):$')
      if len(l:match) != 0
        let l:file = l:match[1]
      endif

      let l:match = matchlist(l:line, '.*line=\(\d*\) .*name=PadreDebugPointer.*$')
      if len(l:match) != 0
        return [l:file, l:match[1] + 0]
      endif
    endfor
  endfunction

After:
  Restore

Execute (Check padre tab and buffer):
  tabnew
  let g:start_tabpagenr = tabpagenr()
  normal itest
  PadreDebug test/progs/test_prog

  sleep 500ms

Then:
  wincmd l

  let t:padre_buf_num = bufnr('%')

  " Check we have a new tab and it's the PADRE_Main buffer
  AssertEqual g:start_tabpagenr + 1, tabpagenr()
  AssertEqual 'PADRE_Logs_1', expand('%:t')
  AssertEqual 0, getbufvar(t:padre_buf_num, '&swapfile')
  AssertEqual 'PADRE_Logs', getbufvar(t:padre_buf_num, '&filetype')
  AssertEqual 0, getbufvar(t:padre_buf_num, '&modifiable')
  AssertEqual 'nofile', getbufvar(t:padre_buf_num, '&buftype')
  AssertEqual 0, getbufvar(t:padre_buf_num, '&buflisted')

  unlet t:padre_buf_num

  quit!
  quit!
  quit!
  quit!

# TODO: Work out what to do with this, probably remove, should really be able to run multiple
#Execute (Check when we run twice the same tab is open):
#  PadreDebug test/progs/test_prog
#  PadreDebug test/progs/test_prog
#
#Then:
#  AssertEqual 1, len(padre#layout#GetTabNumbersContainingBufferName('PADRE_Main'))
#  AssertEqual 2, len(padre#layout#GetBuffersInTab())
#
#  quit
#  quit

Execute (Check when we run PADRE followed by the stop command we have no tab or padre process running):
  let g:NumTabs = tabpagenr('$')
  tabnew
  PadreDebug test/progs/test_prog
  sleep 1
  AssertEqual g:NumTabs + 1, tabpagenr('$')
  PadreStop
  sleep 100ms

Then:
  AssertEqual g:NumTabs, tabpagenr('$')

Execute (Check when we log errors and they log at the correct levels):
  tabnew
  PadreDebug test/progs/test_prog
  sleep 500ms
  let g:PadreLogLevel = 5

  wincmd l
  let t:lastLogLine = line('$')

Then:
  call padre#debugger#Log(1, 'Test Critical Log')
  call g:CheckRegexInLogLines('^[0-9\/]* [0-9:]* (CRITICAL): Test Critical Log$', t:lastLogLine, '$')
  let t:lastLogLine += 1
  call padre#debugger#Log(2, 'Test Error Log')
  call g:CheckRegexInLogLines('^[0-9\/]* [0-9:]* (ERROR): Test Error Log$', t:lastLogLine, '$')
  let t:lastLogLine += 1
  call padre#debugger#Log(3, 'Test Warn Log')
  call g:CheckRegexInLogLines('^[0-9\/]* [0-9:]* (WARN): Test Warn Log$', t:lastLogLine, '$')
  let t:lastLogLine += 1
  call padre#debugger#Log(4, 'Test Info Log')
  call g:CheckRegexInLogLines('^[0-9\/]* [0-9:]* (INFO): Test Info Log$', t:lastLogLine, '$')
  let t:lastLogLine += 1
  call padre#debugger#Log(5, 'Test Debug Log')
  call g:CheckRegexInLogLines('^[0-9\/]* [0-9:]* (DEBUG): Test Debug Log$', t:lastLogLine, '$')
  let t:lastLogLine += 1

  AssertEqual line('$'), 7
  let g:PadreLogLevel = 1
  call padre#debugger#Log(2, 'Test Error Log')
  AssertEqual line('$'), 7

  let g:PadreLogLevel = 2
  call padre#debugger#Log(3, 'Test Warn Log')
  AssertEqual line('$'), 7

  let g:PadreLogLevel = 3
  call padre#debugger#Log(4, 'Test Info Log')
  AssertEqual line('$'), 7

  let g:PadreLogLevel = 4
  call padre#debugger#Log(5, 'Test Debug Log')
  AssertEqual line('$'), 7

  quit!
  quit!
  quit!

Execute (Check we stop PADRE when we close PADRE_Main):
  let g:num_tabs = tabpagenr('$')
  tabnew
  PadreDebug test/progs/test_prog
  sleep 100ms

  normal ZZ

  sleep 100ms

Then:
  AssertEqual g:num_tabs, tabpagenr('$')

Execute (Check we can debug a simple C program):
  tabnew
  let g:mainFileToDebug = expand('%:p:h') . '/test/progs/test_prog.c'
  let g:funcFileToDebug = expand('%:p:h') . '/test/progs/test_func.c'
  execute 'edit ' . g:mainFileToDebug

  call cursor(7,1)

  PadreBreakpoint

  quit

  PadreDebug test/progs/test_prog
  sleep 3

  call g:CheckRegexInLogLines('^[0-9\/]* [0-9:]* (INFO): PADRE Running$', 1, '$')
  call g:CheckRegexInLogLines('^[0-9\/]* [0-9:]* (INFO): Setting breakpoint in file ' . g:mainFileToDebug . ' at line number 7$', 1, '$')
  call g:CheckRegexInLogLines('^[0-9\/]* [0-9:]* (INFO): Breakpoint set file=test_prog.c, line=7$', 1, '$')

  let lastLogLine = g:GetLastLogLineNumber()

  normal r
  sleep 1

  call g:CheckRegexInLogLines('^[0-9\/]* [0-9:]* (INFO): Launching process$', lastLogLine, '$')
  call g:CheckRegexInLogLines('^[0-9\/]* [0-9:]* (INFO): Process \d\+ launched$', lastLogLine, '$')
  call g:CheckRegexInLogLines('^[0-9\/]* [0-9:]* (INFO): Stopped file=' . g:mainFileToDebug . ' line=6$', lastLogLine, '$')

  let current_pointer = g:CheckCurrentCodePointerLine()
  AssertEqual g:mainFileToDebug, current_pointer[0]
  AssertEqual expand('%:p'), current_pointer[0]
  AssertEqual 6, current_pointer[1]

  let lastLogLine = g:GetLastLogLineNumber()

  normal S
  sleep 1

  call g:CheckRegexInLogLines('^[0-9\/]* [0-9:]* (INFO): Stopped file=' . g:funcFileToDebug . ' line=2$', lastLogLine, '$')

  let current_pointer = g:CheckCurrentCodePointerLine()
  AssertEqual g:funcFileToDebug, current_pointer[0]
  AssertEqual expand('%:p'), current_pointer[0]
  AssertEqual 2, current_pointer[1]

  let lastLogLine = g:GetLastLogLineNumber()

  wincmd l
  normal s
  sleep 1

  call g:CheckRegexInLogLines('^[0-9\/]* [0-9:]* (INFO): Stopped file=' . g:funcFileToDebug . ' line=3$', lastLogLine, '$')

  let current_pointer = g:CheckCurrentCodePointerLine()
  AssertEqual g:funcFileToDebug, current_pointer[0]
  AssertEqual 3, current_pointer[1]

  let lastLogLine = g:GetLastLogLineNumber()

  wincmd h
  call cursor(3,12)
  normal vp
  sleep 1

  call g:CheckRegexInLogLines('^[0-9\/]* [0-9:]* Variable (int) a=1$', lastLogLine, '$')

  let lastLogLine = g:GetLastLogLineNumber()

  normal C
  sleep 1

  call g:CheckRegexInLogLines('^[0-9\/]* [0-9:]* (INFO): Stopped file=' . g:mainFileToDebug . ' line=7$', lastLogLine, '$')

  let current_pointer = g:CheckCurrentCodePointerLine()
  AssertEqual g:mainFileToDebug, current_pointer[0]
  AssertEqual expand('%:p'), current_pointer[0]
  AssertEqual 7, current_pointer[1]

  let lastLogLine = g:GetLastLogLineNumber()

  normal C
  sleep 1

  call g:CheckRegexInLogLines('^[0-9\/]* [0-9:]* (INFO): Process \d\+ exited with exit code 0$', lastLogLine, '$')

  quit!
  quit!
  quit!
